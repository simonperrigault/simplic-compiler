
aspect CodeGen {
    public void Program.genCode(PrintStream out) {
        out.println(".global _start");
        out.println(".data");
        out.println("        buf: .skip 1024");
        out.println(".text");
        out.println("_start:");
        out.println("        call main");
        out.println("        movq %rax, %rdi");
        out.println("        movq $60, %rax");
        out.println("        syscall");
        out.println();
        out.println("# Procedure to print number to stdout.");
        out.println("# C signature: void print(long int)");
        out.println("print:");
        out.println("        pushq %rbp");
        out.println("        movq %rsp, %rbp");
        out.println("        ### Convert integer to string (itoa).");
        out.println("        movq 16(%rbp), %rax");
        out.println("        leaq buf(%rip), %rsi # RSI = write pointer (starts at end of buffer)");
        out.println("        addq $1023, %rsi");
        out.println("        movb $0x0A, (%rsi) # insert newline");
        out.println("        movq $1, %rcx # RCX = string length");
        out.println("        cmpq $0, %rax");
        out.println("        jge itoa_loop");
        out.println("        negq %rax # negate to make RAX positive");
        out.println("itoa_loop: # do.. while (at least one iteration)");
        out.println("        movq $10, %rdi");
        out.println("        cqo # sign-extend RAX to RDX:RAX");
        out.println("        idivq %rdi # divide RDX:RAX by 10");
        out.println("        addb $0x30, %dl # remainder + ’0’");
        out.println("        decq %rsi # move string pointer");
        out.println("        movb %dl, (%rsi)");
        out.println("        incq %rcx # increment string length");
        out.println("        cmpq $0, %rax");
        out.println("        jg itoa_loop # produce more digits");
        out.println("itoa_done:");
        out.println("        movq 16(%rbp), %rax");
        out.println("        cmpq $0, %rax");
        out.println("        jge print_end");
        out.println("        decq %rsi");
        out.println("        incq %rcx");
        out.println("        movb $0x2D, (%rsi)");
        out.println("print_end:");
        out.println("        movq $1, %rdi");
        out.println("        movq %rcx, %rdx");
        out.println("        movq $1, %rax");
        out.println("        syscall");
        out.println("        popq %rbp");
        out.println("        ret");
        out.println();
        out.println("# Procedure to read number from stdin.");
        out.println("# C signature: long long int read(void)");
        out.println("read:");
        out.println("        pushq %rbp");
        out.println("        movq %rsp, %rbp");
        out.println("        ### R9 = sign");
        out.println("        movq $1, %r9 # sign <- 1");
        out.println("        ### R10 = sum");
        out.println("        movq $0, %r10 # sum <- 0");
        out.println("skip_ws: # skip any leading whitespace");
        out.println("        movq $0, %rdi");
        out.println("        leaq buf(%rip), %rsi");
        out.println("        movq $1, %rdx");
        out.println("        movq $0, %rax");
        out.println("        syscall # get one char: sys_read(0, buf, 1)");
        out.println("        cmpq $0, %rax");
        out.println("        jle atoi_done # nchar <= 0");
        out.println("        movb (%rsi), %cl # c <- current char");
        out.println("        cmp $32, %cl");
        out.println("        je skip_ws # c == space");
        out.println("        cmp $13, %cl");
        out.println("        je skip_ws # c == CR");
        out.println("        cmp $10, %cl");
        out.println("        je skip_ws # c == NL");
        out.println("        cmp $9, %cl");
        out.println("        je skip_ws # c == tab");
        out.println("        cmp $45, %cl # check if negative");
        out.println("        jne atoi_loop");
        out.println("        movq $-1, %r9 # sign <- -1");
        out.println("        movq $0, %rdi");
        out.println("        leaq buf(%rip), %rsi");
        out.println("        movq $1, %rdx");
        out.println("        movq $0, %rax");
        out.println("        syscall # get one char: sys_read(0, buf, 1)");
        out.println("atoi_loop:");
        out.println("        cmpq $0, %rax # while (nchar > 0)");
        out.println("        jle atoi_done # leave loop if nchar <= 0");
        out.println("        movzbq (%rsi), %rcx # move byte, zero extend to quad-word");
        out.println("        cmpq $0x30, %rcx # test if < ’0’");
        out.println("        jl atoi_done # character is not numeric");
        out.println("        cmpq $0x39, %rcx # test if > ’9’");
        out.println("        jg atoi_done # character is not numeric");
        out.println("        imulq $10, %r10 # multiply sum by 10");
        out.println("        subq $0x30, %rcx # value of character");
        out.println("        addq %rcx, %r10 # add to sum");
        out.println("        movq $0, %rdi");
        out.println("        leaq buf(%rip), %rsi");
        out.println("        movq $1, %rdx");
        out.println("        movq $0, %rax");
        out.println("        syscall # get one char: sys_read(0, buf, 1)");
        out.println("        jmp atoi_loop # loop back");
        out.println("atoi_done:");
        out.println("        imulq %r9, %r10 # sum *= sign");
        out.println("        movq %r10, %rax # put result value in RAX");
        out.println("        popq %rbp");
        out.println("        ret");
        out.println();


        for (FuncDecl decl: getFuncDeclList()) {
            decl.genCode(out);
        }
    }

    public void FuncDecl.genCode(PrintStream out) {
        out.println(toString() + ":");
        out.println("        pushq %rbp");
        out.println("        movq %rsp, %rbp");
        // out.println("        subq $" + (numLocals()*8) + ", %rsp");

        getBlock().genCode(out);

        out.println(toString() + "_end:");
        out.println("        movq %rbp, %rsp");
        out.println("        popq %rbp");
        out.println("        ret");
    }

    public void Stmt.genCode(PrintStream out) {
        out.println("        # genCode not implemented");
    }
    public void Block.genCode(PrintStream out) {
        for (Stmt stmt: getStmtList()) {
            stmt.genCode(out);
        }
    }

    public void ReturnStmt.genCode(PrintStream out) {
        getExpr().genEval(out);
        out.println("        jmp " + enclosingFunction().toString() + "_end");
    }
    public void FuncCallStmt.genCode(PrintStream out) {
        getFuncCall().genEval(out);
    }
    public void IfStmt.genCode(PrintStream out) {
        String elseLabel = uniqueName() + "else";
        String endLabel = uniqueName() + "end";
        getCondition().genConditionalJump(out, elseLabel);
        getBlock().genCode(out);
        out.println("        jmp " + endLabel);
        out.println(elseLabel + ":");
        if (hasElseBlock()) {
            getElseBlock().genCode(out);
        }
        out.println(endLabel + ":");
    }
    public void WhileStmt.genCode(PrintStream out) {
        String loopLabel = uniqueName() + "loop";
        String endLabel = uniqueName() + "end";
        out.println(loopLabel + ":");
        getCondition().genConditionalJump(out, endLabel);
        getBlock().genCode(out);
        out.println("        jmp " + loopLabel);
        out.println(endLabel + ":");
    }

    public void Expr.genEval(PrintStream out) {
        out.println("        # genEval not implemented");
    }
    public void Expr.genConditionalJump(PrintStream out, String label) {
        out.println("        # genConditionalJump not implemented");
    }
    public void LtExpr.genConditionalJump(PrintStream out, String label) {
        getLeft().genEval(out);
        out.println("        pushq %rax");
        getRight().genEval(out);
        out.println("        popq %rbx");
        out.println("        cmpq %rax, %rbx");
        out.println("        jge " + label);
    }
    public void LeExpr.genConditionalJump(PrintStream out, String label) {
        getLeft().genEval(out);
        out.println("        pushq %rax");
        getRight().genEval(out);
        out.println("        popq %rbx");
        out.println("        cmpq %rax, %rbx");
        out.println("        jg " + label);
    }
    public void GtExpr.genConditionalJump(PrintStream out, String label) {
        getLeft().genEval(out);
        out.println("        pushq %rax");
        getRight().genEval(out);
        out.println("        popq %rbx");
        out.println("        cmpq %rax, %rbx");
        out.println("        jle " + label);
    }
    public void GeExpr.genConditionalJump(PrintStream out, String label) {
        getLeft().genEval(out);
        out.println("        pushq %rax");
        getRight().genEval(out);
        out.println("        popq %rbx");
        out.println("        cmpq %rax, %rbx");
        out.println("        jl " + label);
    }
    public void EqExpr.genConditionalJump(PrintStream out, String label) {
        getLeft().genEval(out);
        out.println("        pushq %rax");
        getRight().genEval(out);
        out.println("        popq %rbx");
        out.println("        cmpq %rax, %rbx");
        out.println("        jne " + label);
    }
    public void NeqExpr.genConditionalJump(PrintStream out, String label) {
        getLeft().genEval(out);
        out.println("        pushq %rax");
        getRight().genEval(out);
        out.println("        popq %rbx");
        out.println("        cmpq %rax, %rbx");
        out.println("        je " + label);
    }

    public void AddExpr.genEval(PrintStream out) {
        getLeft().genEval(out);
        out.println("        pushq %rax");
        getRight().genEval(out);
        out.println("        movq %rax, %rbx");
        out.println("        popq %rax");
        out.println("        addq %rbx, %rax");
    }
    public void SubExpr.genEval(PrintStream out) {
        getLeft().genEval(out);
        out.println("        pushq %rax");
        getRight().genEval(out);
        out.println("        movq %rax, %rbx");
        out.println("        popq %rax");
        out.println("        subq %rbx, %rax");
    }
    public void MulExpr.genEval(PrintStream out) {
        getLeft().genEval(out);
        out.println("        pushq %rax");
        getRight().genEval(out);
        out.println("        movq %rax, %rbx");
        out.println("        popq %rax");
        out.println("        imulq %rbx, %rax");
    }
    public void DivExpr.genEval(PrintStream out) {
        getLeft().genEval(out);
        out.println("        pushq %rax");
        getRight().genEval(out);
        out.println("        movq %rax, %rbx");
        out.println("        popq %rax");
        out.println("        cqo");        // NB: sign extend RAX to RDX to prepare for idiv
        out.println("        idivq %rbx");
    }
    public void ModExpr.genEval(PrintStream out) {
        getLeft().genEval(out);
        out.println("        pushq %rax");
        getRight().genEval(out);
        out.println("        movq %rax, %rbx");
        out.println("        popq %rax");
        out.println("        cqo");        // NB: sign extend RAX to RDX to prepare for idiv
        out.println("        idivq %rbx");
        out.println("        movq %rdx, %rax");
    }
    public void OppExpr.genEval(PrintStream out) {
        getExpr().genEval(out);
        out.println("        negq %rax");
    }
    public void PrimaryExpr.genEval(PrintStream out) {
        getExpr().genEval(out);
    }
    public void Numeral.genEval(PrintStream out) {
        out.println("        movq $" + getNUMERAL() + ", %rax");
    }
    public void FuncCall.genEval(PrintStream out) {
        for (int i = getNumParamList() - 1; i >= 0; i--) {
            getParamList(i).genEval(out);
            out.println("        pushq %rax");
        }
        out.println("        call " + getFuncName().function().toString());
    }
}