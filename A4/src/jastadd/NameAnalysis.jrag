aspect NameAnalysis {
    syn IdDecl IdUse.decl() = lookup(getID());
    inh IdDecl IdUse.lookup(String name);
    
    inh IdDecl Stmt.lookup(String name);

    syn IdDecl Stmt.localLookup(String name, int until) {
        return unknownDecl();
    }
    syn IdDecl DeclStmt.localLookup(String name, int until) {
        if (until == -1) {
            until = getNumDecl()-1;
        }
        for (int i = 0; i <= until; i++) {
            if (getDecl(i).getIdDecl().getID().equals(name)) {
                return getDecl(i).getIdDecl();
            }
        }
        return unknownDecl();
    }
    eq DeclStmt.getDecl(int index).lookup(String name) {
        IdDecl decl = localLookup(name, index);
        return !decl.isUnknown() ? decl : lookup(name);
    }

    syn IdDecl Block.localLookup(String name, int until) {
        for (int i = 0; i <= until; i++) {
            IdDecl res = getStmt(i).localLookup(name, -1);
            if (!res.isUnknown()) {
                return res;
            }
        }
        return unknownDecl();
    }
    eq Block.getStmt(int index).lookup(String name) {
        IdDecl decl = localLookup(name, index);
        return !decl.isUnknown() ? decl : lookup(name);
    }

    inh IdDecl FuncDecl.lookup(String name);
    syn IdDecl FuncDecl.localLookup(String name) {
        for (IdDecl idDecl : getParamListList()) {
            if (idDecl.getID().equals(name)) {
                return idDecl;
            }
        }
        return unknownDecl();
    }
    eq FuncDecl.getChild().lookup(String name) {
        IdDecl decl = localLookup(name);
        return !decl.isUnknown() ? decl : lookup(name);
    }

    syn IdDecl Program.localLookup(String name) {
        for (FuncDecl func : getFuncDeclList()) {
            if (func.getFuncName().getID().equals(name)) {
                return func.getFuncName();
            }
        }
        return unknownDecl();
    }
    eq Program.getChild().lookup(String name) {
        IdDecl decl = localLookup(name);
        return !decl.isUnknown() ? decl : unknownDecl();
    }

    inh IdDecl IdDecl.lookup(String name);
    syn boolean IdDecl.isMultiDeclared() = lookup(getID()) != this;
}

aspect CircularDefinitions {
    /* Identify circular definitions in let expressions */
    syn boolean IdUse.isCircular() = inExprOf(decl());
    inh boolean IdUse.inExprOf(IdDecl idDecl);

    eq Decl.getExpr().inExprOf(IdDecl idDecl) {
        return getIdDecl() == idDecl;
    }
}